#include <SoftwareSerial.h> // Used for Bluetooth
#include <DHT.h> // used DHT sensor library by Adafruit 1.30 ver & Adafruit Unified Sensor by Adafruit 1.0.2 ver for using two DHT11 Sensor
#include <Stepper.h> // Used for step motor

// define PinNum, Type & Object for get temperature, humidity data 
#define inDHT11 12
#define outDHT11 A5
#define DHTTYPE DHT11
DHT outdht(outDHT11, DHTTYPE);
DHT indht(inDHT11, DHTTYPE);

// criterion in system to compare with gather data in summer , modify as needed & getState() Method too
int DUST_DENSITY_MIN = 30;
int DUST_DENSITY_MID = 80;
int DUST_DENSITY_MAX = 150;
 
int HUMIDITY_MIN =30;
int HUMIDITY_MID =50;
int HUMIDITY_MAX =70;

int TEMPERATURE_MIN =18;
int TEMPERATURE_MID =25;
int TEMPERATURE_MAX =30;

// using getState Method & show img file by state on apk
#define VERY_GOOD 1
#define GOOD 2
#define BAD 3
#define VERY_BAD 4

// for get state var by compare & send byte data to apk
byte stateDustDensity = 0;
byte stateHumidity = 0;
byte stateTemperature = 0;
byte state = 0;

const int stepR=380; // var stepR using stepMotor's Rotation , 1 step = 1.8' / 1.8' * 400 = 720'
Stepper myStepper(stepR,2,3,4,5); 
SoftwareSerial bt(11, 10); // bt = BlueTooth (TX, RX) 

int measurePin = A0; // A0 analogPin = dustSensor's infrared light receive
int ledPower = 7; // 7 digitalPin(used to digitalPin) = dustSensor's infrared light LED

//using for get DustDensity variable
int samplingTime = 280;
int deltaTime = 40;
int sleepTime = 9680;
float voMeasured = 0.0;
float calcVoltage = 0.0;
int dustDensity = 0.0;

//using for get OutSide temperature & humidity
int outTemp = 0;
int outHumi = 0;

//using for get InSide temperature & humidity
int inTemp = 0;
int inHumi = 0;

String str;

//input user data (MIT App Inventor)
int u_dust;
int u_temp;
int u_humi;
boolean u_dataExist = false;

int dNum = 0; // for distinction in set user data input by apk

int mode = 1;
boolean isWindowOpened = false; // true : window is open / false : window is closed

// inside data or outside data or user data difference value
int dValue_dust = 0;
int dValue_temp = 0;
int dValue_humi = 0;

void setup() 
{
  Serial.begin(9600);
  bt.begin(9600);
  pinMode(ledPower, OUTPUT); // dustSenser's LED
  pinMode(2, OUTPUT);
  pinMode(3, OUTPUT);
  myStepper.setSpeed(15);
}

void loop() 
{
  getDustValue();
  getOutTempHumiValue();
  getInTempHumiValue();
  getUserDTH_Value();
  delay(2000);
  if(u_dataExist && (mode == 1)){
    if(dustDensity < u_dust){
      if((u_temp < inTemp) && (outTemp < inTemp) || (u_humi < inHumi) && (outHumi < inHumi)){
        openWindow(stepR); 
      }
    }else if(dustDensity > u_dust){
      closeWindow(stepR);
    }else if((u_temp > inTemp) || (u_humi > inHumi)){
        closeWindow(stepR); 
    }
  }
}
  
/*
 getDustValue();
  getOutTempHumiValue();
  getInTempHumiValue();
  getUserDTH_Value();
  delay(2000);
  if(u_dataExist && (mode == 1)){
    if(dustDensity <= u_dust){
      if((u_temp <= inTemp) || (u_humi <= inHumi)){
        openWindow(stepR); 
      }else {
        closeWindow(stepR);
      }
    }else if(dustDensity > u_dust){
      closeWindow(stepR);
    }
  }
 */

void getUserDTH_Value(){
  if(bt.available()){
    str = bt.readStringUntil(',');
    if(str == "openWindow"){
      openWindow(stepR);
    }else if(str == "closeWindow"){
      closeWindow(stepR);
    }else if(str == "rTime"){
      getState();
      delay(700);
      sendoutside(dustDensity, outHumi, outTemp , state);
      delay(1000);
      sendinside(inHumi, inTemp);
      delay(1000);
    }else if(str == "getuData"){
      senduserData(u_dust, u_humi, u_temp);
      delay(1000);
    }else if(str =="autoOn"){
      mode = 1;
      delay(200);
    }else if(str =="autoOff"){
      mode = 0;
      delay(200);
    }
    else {
      if(dNum == 0){
        u_dust = str.toInt();
        dNum += 1;
        } else if(dNum == 1){
          u_temp = str.toInt();
          dNum += 1;
        } else if(dNum == 2){
          u_humi = str.toInt();
          dNum += 1;
        }
        u_dataExist = true;
    }
  }
  if(dNum == 3){
    dNum = 0;
  }
}

void getDustValue(){
  
  digitalWrite(ledPower, LOW);
  delayMicroseconds(samplingTime);
  voMeasured = analogRead(measurePin);
  delayMicroseconds(deltaTime);
  digitalWrite(ledPower, HIGH);
  delayMicroseconds(sleepTime);

  calcVoltage = voMeasured * (5.0 / 1023.0);
  delay(300);
  dustDensity = round(abs((calcVoltage - 0.30)/0.005));
  delay(300);
  
}

void getOutTempHumiValue(){
  outTemp = outdht.readTemperature();
  delay(200);
  outHumi = outdht.readHumidity();
  delay(200);
}

void getInTempHumiValue(){
  inTemp = indht.readTemperature();
  delay(200);
  inHumi = indht.readHumidity();
  delay(200);
}

void closeWindow(int pStep){
  if(isWindowOpened){
    myStepper.step(pStep);
    isWindowOpened = false;
    delay(300);
  }
}
void openWindow(int pStep){
  if(!isWindowOpened){
    myStepper.step(-pStep);
    isWindowOpened = true;
    delay(300);
  }
}

void getState(){
  if (dustDensity > DUST_DENSITY_MAX){
      stateDustDensity = VERY_BAD;
  }
  else if (dustDensity <= DUST_DENSITY_MAX && dustDensity > DUST_DENSITY_MID){
      stateDustDensity = BAD;
  }
  else if (dustDensity <= DUST_DENSITY_MID && dustDensity > DUST_DENSITY_MIN){
      stateDustDensity = GOOD;
  }
  else if (dustDensity <= DUST_DENSITY_MIN && dustDensity >= 0){
      stateDustDensity = VERY_GOOD;
  }
  delay(200);
  if (outHumi <= HUMIDITY_MIN){
      stateHumidity = BAD;
  }
  else if (outHumi > HUMIDITY_MIN && outHumi <= HUMIDITY_MID){
      stateHumidity = VERY_GOOD;
  }
  else if (outHumi > HUMIDITY_MID && outHumi <= HUMIDITY_MAX){
      stateHumidity = GOOD;
  }
  else if (outHumi > HUMIDITY_MAX){
      stateHumidity = VERY_BAD;
  }
  delay(200);

  if (outTemp <= TEMPERATURE_MIN){
      stateTemperature = GOOD;
  }
  else if (outTemp > TEMPERATURE_MIN && outTemp <= TEMPERATURE_MID){
      stateTemperature = VERY_GOOD;
  }
  else if (outTemp > TEMPERATURE_MID && outTemp <= TEMPERATURE_MAX){
      stateTemperature = BAD;
  }
  else if (outTemp > TEMPERATURE_MAX){
      stateTemperature = VERY_BAD;
  }
  delay(200);
  
  if (stateDustDensity == VERY_BAD) {
      state = VERY_BAD;
  }
  else if (stateDustDensity == BAD || (stateHumidity == BAD || stateTemperature == BAD)) {
      state = BAD;
  }
  else if (stateDustDensity == GOOD || (stateHumidity == GOOD || stateTemperature == GOOD)) {
      state = GOOD;
  }
  else if (stateDustDensity == VERY_GOOD && stateHumidity == VERY_GOOD && stateTemperature == VERY_GOOD) {
      state = VERY_GOOD;
  }
  delay(200);
}

void sendoutside(int dustDensity, byte outHumi, byte outTemp, byte state)
{
    byte data[7] = {0,};
 
    data[0] = 0xF0;
    data[1] = (dustDensity & 0xFF00) >> 8;
    data[2] = dustDensity & 0xFF;
    data[3] = outHumi;
    data[4] = outTemp;
    data[5] = state;
    data[6] = 0xF1;
 
    bt.write(data, 7);
}

void sendinside(byte inHumi, byte inTemp)
{
    byte data[4] = {0,};
 
    data[0] = 0xE0;
    data[1] = inHumi;
    data[2] = inTemp;
    data[3] = 0xE1;
 
    bt.write(data, 4);
}

void senduserData(int u_dust, byte u_humi, byte u_temp)
{
    byte data[6] = {0,};
 
    data[0] = 0xD0;
    data[1] = (u_dust & 0xFF00) >> 8;
    data[2] = u_dust & 0xFF;
    data[3] = u_humi;
    data[4] = u_temp;
    data[5] = 0xD1;
 
    bt.write(data, 6);
}